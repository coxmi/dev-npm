
.antialias() {
    -webkit-font-smoothing: antialiased;
    font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}


.ellipsis() {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.clearfix() {
    *zoom:1; 
    &:before, 
    &:after { 
        content:""; 
        display:table; 
    } 
    &:after { 
        clear:both;
    }
}


/* 
    for 
    provides @rules with @i.
*/

.for(@number, @rules) {
    & {
        .iter(@number);
        .iter(@i) when (@i > 0) {
            .iter(@i - 1);
            @rules();
        }
    }   
}


/* 
    for-each 
    provides @rules with @key and @value
*/

.for-each(@list, @rules) {
    & {
        .iter(length(@list));
        .iter(@for-each-i) when (@for-each-i > 0) {
            .iter(@for-each-i - 1);
            @key: @for-each-i;
            @value: extract(@list, @for-each-i); 
            @rules();
        }
    }
}


/* 
    for-each-associative
    provides @rules with @item @key and @value.
    Use with an associative list: key1 value1, key2 value2;
*/

.for-each-associative(@list, @rules) {
    & {
        .iter(length(@list));
        .iter(@for-each-assoc-i) when (@for-each-assoc-i > 0) {
            .iter(@for-each-assoc-i - 1);
            @_item: extract(@list, @for-each-assoc-i); 
            @key: extract(@_item, 1); 
            @value: extract(@_item, 2); 
            @rules();
        }
    }
}

/*
    for-breakpoints
    repeats @rules per breakpoint, and provides the following vars to @rules:
    • @breakpoint – name of breakpoint, e.g. mobile
    • @width – width of breakpoint, e.g. 60em
*/

.for-breakpoints(@rules) {
    & {
        .iter(length(@breakpoints));
        .iter(@for-breakpoints-i) when (@for-breakpoints-i > 0) {
            .iter(@for-breakpoints-i - 1);
            @_value: extract(@breakpoints, @for-breakpoints-i); 
            @breakpoint: e(@_value);
            @width: @@breakpoint;
            @media(min-width:@width) {
                @rules();
            }
        }
    }
}

/*
    for-n-per-breakpoint
    repeats @rules @n times within each breakpoint
    provides:
    • @i – iteration value of @n
    • @breakpoint – name of breakpoint, e.g. mobile
    • @width – width of breakpoint, e.g. 60em
*/

.for-n-per-breakpoint(@n, @rules) {
    .for-breakpoints({
        .for(@n, {
            @rules();
        });
    });
}
